# Changelog

## [2024-03-06]
- Fixed TypeScript errors in splash-cursor.tsx by adding proper type assertions for WebGL contexts
- Created demo component in app/code/demo.tsx
- Added proper type assertions for WebGLRenderingContext and WebGL2RenderingContext
- Fixed type safety issues with WebGL context initialization

[2024-03-06] Added new features:
- Created new globe-demo page (/pages/globe-demo.tsx)
- Implemented interactive 3D globe visualizationsss
- Added responsive layout with dark theme and descriptive content 

## [2024-03-13] - Component Restructuring

### Added
- Created new `/components/oa-stakes` directory for better organization
- Added `Filters.tsx` component to handle all filtering logic
- Added `SummaryCards.tsx` component for statistics display
- Created `index.ts` for clean exports

### Changed
- Moved `OAStakesChart.tsx` to `components/oa-stakes/Chart.tsx`
- Moved `OAStakesTable.tsx` to `components/oa-stakes/Table.tsx`
- Updated `pages/oa-stakes.tsx` to use new component structure
- Simplified imports using index exports

### Improvements
- Better component organization and separation of concerns
- More maintainable file structure
- Cleaner code with dedicated components for each feature
- Improved reusability of components 

## 2024-03-21
- Updated pages/pls-sac-addresses.tsx to use new components from pls-sac-addresses folder
- Changed component imports from oa-stakes to pls-sac-addresses
- Updated page title and descriptions to reflect PLS SAC addresses
- Renamed page component to PLSSacAddressesPage
- Updated chart title to "PLS SAC Stakes Over Time"

## 2024-03-21 - Transaction Table Update
- Converted Table.tsx to fetch on-chain transactions instead of GraphQL data
- Added ethers.js integration for blockchain interaction
- Updated table columns to show transaction details (hash, from, to, value, etc.)
- Added chain-specific RPC endpoints for ETH and PLS
- Simplified page layout to focus on transaction data
- Added chain filter toggle between ETH and PLS networks
- Updated component exports in index.ts

## 2024-03-21 - Bug Fixes
- Fixed TypeScript errors in Table.tsx
- Removed unused code and dependencies
- Simplified component props
- Added proper type definitions for transactions
- Fixed ethers.js integration
- Cleaned up component structure
- Removed duplicate code
- Updated page component to match new table props

[2024-03-21]
- Switched to using Adamant ETH transactions storage API
- Removed direct blockchain querying
- Added support for both native and ERC20 transactions
- Updated transaction interface to match API response format
- Added transaction type column (Native/ERC20)
- Improved error handling for API requests
- Simplified data fetching logic
- Removed ethers.js dependency

## 2024-03-21 - Transaction Table Update
- Updated Table.tsx to use proper ethers.js typing
- Added Transaction interface for better type safety
- Fixed block fetching logic to use getBlock with transactions
- Improved type assertions for transaction processing
- Added proper error handling and loading states
- Fixed toLowerCase error by adding proper null checks for transaction addresses
- Added safe handling of undefined addresses with fallback values
- Optimized address comparison logic
- Extended transaction history to cover 12 months instead of 10,000 blocks
- Added chain-specific block time calculations (ETH: 15s, PLS: 2s)
- Improved error handling with try-catch blocks and chunk recovery
- Added rate limiting protection with delays between chunk processing
- Optimized chunk sizes for different chains (ETH: 10, PLS: 50)
- Increased maximum transaction limit to 1000
- Changed default chain to ETH in pls-sac-addresses page
- Added detailed console logging for transaction processing
- Added chain identifier to all console messages
- Improved loading skeleton UI to match OA Stakes table
- Added transaction details to console logs
- Added progress tracking for block processing
- Optimized transaction scanning for addresses with few transactions
- Added initial transaction count check to avoid unnecessary scanning
- Implemented progressive block range expansion
- Reduced initial scan range to 10,000 blocks
- Added early exit when no transactions are found
- Improved block processing efficiency by scanning one block at a time
- Added smart backtracking to find older transactions 

## [2024-03-21] - Etherscan API Integration
- Switched to using Etherscan/Pulsescan APIs for transaction fetching
- Added support for normal, internal, and ERC20 transactions
- Improved transaction type display with colored badges
- Added proper value formatting for different token decimals
- Added failed transaction indication with reduced opacity
- Added parallel fetching of different transaction types
- Added sorting by timestamp for all transaction types
- Updated transaction interface to match Etherscan API response
- Added environment variable support for API keys
- Improved error handling and loading states
- Added visual indicators for transaction types (Normal/Internal/ERC20) 

## [2024-03-27]
- Renamed `PooledStakes` component to `LoginTable` in components/login-page/pooled-stakes/login-table.tsx to match the file name
- Updated imports and exports in index.ts and pages/index.tsx to use the renamed `LoginTable` component
- Modified SphereLayout to start with a random sphere instead of always starting with MAXI
- Restored sphere-2 directory with individual sphere components (MAXI, DECI, LUCKY, TRIO, BASE) and their specific configurations 

## 2024-03-26
- Created new StatsTable component based on LoginTable
- Added comprehensive token statistics display for both PulseChain and Ethereum networks
- Updated stats page to use the new StatsTable component
- Added chain switching functionality
- Added additional columns: Supply, T-Shares, Principal
- Improved table styling and responsiveness
- Added loading states with skeletons for better UX
- Added Dexscreener links for tokens with valid pair addresses 

[2024-03-21] MAXI Sphere Updates
- Restructured maxi.tsx to match deci.tsx implementation
- Set spiralPoints to 5555 to match MAXI stake length
- Updated color scheme to MAXI blue (#3991ED)
- Added performance optimizations for color calculations
- Improved camera controls and animation settings
- Added collapsible stats panel with yield information
- Implemented proper cleanup and error handling
- Added entrance screen with MAXI logo
- Optimized animation frame handling for smoother performance 

2024-03-27
- Removed NEXT_PUBLIC_ prefix from WHITELISTED_EMAILS environment variable in whitelisted-handles.ts
- Created new API endpoint at /api/whitelist/check for checking whitelist status
- Created useWhitelist hook for client-side whitelist checking 

## [2024-03-26]
### Changed
- Updated middleware.ts to use direct API call for whitelist checking instead of isEmailWhitelisted function
- Installed next-auth package for JWT handling
- Improved error handling in middleware to redirect to home page on errors
- Added proper session handling with next-auth/jwt
- Maintained protected pages configuration for consistent access control 

[2024-04-26] Added eHEX Transactions Page
- Created new page at pages/ehex-transactions.tsx
- Created new components in components/ehex-transactions/
  - Filters.tsx - Date range filter component
  - Chart.tsx - Transaction volume chart component
  - Table.tsx - Transaction table component
  - WalletNetwork.tsx - Network visualization component
  - index.ts - Component exports
- Set up basic structure for tracking eHEX transactions for address 0x705C053d69eB3B8aCc7C404690bD297700cCf169 

- Created Next.js API route (pages/api/bankx-balances.ts) to fetch eHEX, ETH, and USDC balances from Etherscan, with 60s in-memory caching.
- Updated pages/bankx.tsx to fetch balances from the new API route instead of directly from Etherscan, preventing ETH balance reset to 0 and improving reliability. 

[2024-03-19] Added login banner for non-authenticated users
- Created new LoginBanner component in components/ui/login-banner.tsx
- Added banner to SphereLayout to show across all pages
- Banner includes link to login with X
- Banner only shows for non-logged in users
- Uses backdrop blur and semi-transparent background to match site theme 

[2024-03-27] Modified gasSavingPercentage in /pages/api/tokens/index.ts to round to 2 decimal places for better readability and consistency 

[2024-03-27] Removed launchDate field from /pages/api/tokens/index.ts API response to simplify the data structure 

[2024-03-27] Modified date formatting in /pages/api/tokens/index.ts to only show the date portion without time 

[2024-03-27] Restructured date fields in /pages/api/tokens/index.ts to be grouped under a 'dates' object for better organization 

[2024-03-27] Restructured API response in /pages/api/tokens/index.ts to use nested objects:
- Added 'stake' object for stake-related data (principal, tShares, days, progress)
- Added 'token' object for token-related data (supply, price, costPerTShare)
- Added 'gas' object for gas-related data (units and savings)
- Renamed some fields for clarity and consistency 

[2024-03-27] Renamed soloStakeUnits to equivalentSoloStakeUnits in /pages/api/tokens/index.ts for better clarity 

[2024-03-27] Added daysLeft field to stake object in /pages/api/tokens/index.ts, calculated as daysTotal - daysSinceStart (minimum 0) 

[2024-03-27] Modified progressPercentage and costPerTShare in /pages/api/tokens/index.ts to round to 2 decimal places for consistency 

[2024-03-27] Renamed costPerTShare to costPerTShareUSD in /pages/api/tokens/index.ts to be more explicit about the currency unit 

[2024-03-27] Modified principal and supply values in /pages/api/tokens/index.ts to round to 2 decimal places for consistency 

[2024-03-27] Removed lastUpdated and apiVersion fields from /pages/api/tokens/index.ts API response to simplify the output 

[2024-03-27] Updated API rate limiting and CORS in /pages/api/tokens/index.ts:
- Reduced rate limit to 10 requests per minute per IP
- Added flexible domain matching for CORS
- Added more example domains in the configuration 

[2024-03-27] Simplified CORS configuration in /pages/api/tokens/index.ts:
- Removed domain restrictions to allow access from any origin
- Maintained rate limiting at 10 requests per minute per IP 

[2024-03-19] Modified OA Movement Cron
- Updated oa-movement-cron.ts to send transaction check emails regardless of finding new transactions
- Added monitoring configuration status to email content
- Maintained all transaction monitoring logic for future use
- Added detailed status reporting in emails (monitored address, monitoring settings)
- Set cron job to run every 5 minutes for testing purposes 